"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deserializeAws_restJson1GetHostedConfigurationVersionCommand = exports.deserializeAws_restJson1GetEnvironmentCommand = exports.deserializeAws_restJson1GetDeploymentStrategyCommand = exports.deserializeAws_restJson1GetDeploymentCommand = exports.deserializeAws_restJson1GetConfigurationProfileCommand = exports.deserializeAws_restJson1GetConfigurationCommand = exports.deserializeAws_restJson1GetApplicationCommand = exports.deserializeAws_restJson1DeleteHostedConfigurationVersionCommand = exports.deserializeAws_restJson1DeleteEnvironmentCommand = exports.deserializeAws_restJson1DeleteDeploymentStrategyCommand = exports.deserializeAws_restJson1DeleteConfigurationProfileCommand = exports.deserializeAws_restJson1DeleteApplicationCommand = exports.deserializeAws_restJson1CreateHostedConfigurationVersionCommand = exports.deserializeAws_restJson1CreateEnvironmentCommand = exports.deserializeAws_restJson1CreateDeploymentStrategyCommand = exports.deserializeAws_restJson1CreateConfigurationProfileCommand = exports.deserializeAws_restJson1CreateApplicationCommand = exports.serializeAws_restJson1ValidateConfigurationCommand = exports.serializeAws_restJson1UpdateEnvironmentCommand = exports.serializeAws_restJson1UpdateDeploymentStrategyCommand = exports.serializeAws_restJson1UpdateConfigurationProfileCommand = exports.serializeAws_restJson1UpdateApplicationCommand = exports.serializeAws_restJson1UntagResourceCommand = exports.serializeAws_restJson1TagResourceCommand = exports.serializeAws_restJson1StopDeploymentCommand = exports.serializeAws_restJson1StartDeploymentCommand = exports.serializeAws_restJson1ListTagsForResourceCommand = exports.serializeAws_restJson1ListHostedConfigurationVersionsCommand = exports.serializeAws_restJson1ListEnvironmentsCommand = exports.serializeAws_restJson1ListDeploymentStrategiesCommand = exports.serializeAws_restJson1ListDeploymentsCommand = exports.serializeAws_restJson1ListConfigurationProfilesCommand = exports.serializeAws_restJson1ListApplicationsCommand = exports.serializeAws_restJson1GetHostedConfigurationVersionCommand = exports.serializeAws_restJson1GetEnvironmentCommand = exports.serializeAws_restJson1GetDeploymentStrategyCommand = exports.serializeAws_restJson1GetDeploymentCommand = exports.serializeAws_restJson1GetConfigurationProfileCommand = exports.serializeAws_restJson1GetConfigurationCommand = exports.serializeAws_restJson1GetApplicationCommand = exports.serializeAws_restJson1DeleteHostedConfigurationVersionCommand = exports.serializeAws_restJson1DeleteEnvironmentCommand = exports.serializeAws_restJson1DeleteDeploymentStrategyCommand = exports.serializeAws_restJson1DeleteConfigurationProfileCommand = exports.serializeAws_restJson1DeleteApplicationCommand = exports.serializeAws_restJson1CreateHostedConfigurationVersionCommand = exports.serializeAws_restJson1CreateEnvironmentCommand = exports.serializeAws_restJson1CreateDeploymentStrategyCommand = exports.serializeAws_restJson1CreateConfigurationProfileCommand = exports.serializeAws_restJson1CreateApplicationCommand = void 0;
exports.deserializeAws_restJson1ValidateConfigurationCommand = exports.deserializeAws_restJson1UpdateEnvironmentCommand = exports.deserializeAws_restJson1UpdateDeploymentStrategyCommand = exports.deserializeAws_restJson1UpdateConfigurationProfileCommand = exports.deserializeAws_restJson1UpdateApplicationCommand = exports.deserializeAws_restJson1UntagResourceCommand = exports.deserializeAws_restJson1TagResourceCommand = exports.deserializeAws_restJson1StopDeploymentCommand = exports.deserializeAws_restJson1StartDeploymentCommand = exports.deserializeAws_restJson1ListTagsForResourceCommand = exports.deserializeAws_restJson1ListHostedConfigurationVersionsCommand = exports.deserializeAws_restJson1ListEnvironmentsCommand = exports.deserializeAws_restJson1ListDeploymentStrategiesCommand = exports.deserializeAws_restJson1ListDeploymentsCommand = exports.deserializeAws_restJson1ListConfigurationProfilesCommand = exports.deserializeAws_restJson1ListApplicationsCommand = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
const smithy_client_1 = require("@aws-sdk/smithy-client");
const serializeAws_restJson1CreateApplicationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = "/applications";
    let body;
    body = JSON.stringify({
        ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_restJson1TagMap(input.Tags, context) }),
    });
    const { hostname, protocol = "https", port } = await context.endpoint();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateApplicationCommand = serializeAws_restJson1CreateApplicationCommand;
const serializeAws_restJson1CreateConfigurationProfileCommand = async (input, context) => {
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = "/applications/{ApplicationId}/configurationprofiles";
    if (input.ApplicationId !== undefined) {
        const labelValue = input.ApplicationId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: ApplicationId.");
        }
        resolvedPath = resolvedPath.replace("{ApplicationId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: ApplicationId.");
    }
    let body;
    body = JSON.stringify({
        ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
        ...(input.LocationUri !== undefined && input.LocationUri !== null && { LocationUri: input.LocationUri }),
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
        ...(input.RetrievalRoleArn !== undefined &&
            input.RetrievalRoleArn !== null && { RetrievalRoleArn: input.RetrievalRoleArn }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_restJson1TagMap(input.Tags, context) }),
        ...(input.Validators !== undefined &&
            input.Validators !== null && { Validators: serializeAws_restJson1ValidatorList(input.Validators, context) }),
    });
    const { hostname, protocol = "https", port } = await context.endpoint();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateConfigurationProfileCommand = serializeAws_restJson1CreateConfigurationProfileCommand;
const serializeAws_restJson1CreateDeploymentStrategyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = "/deploymentstrategies";
    let body;
    body = JSON.stringify({
        ...(input.DeploymentDurationInMinutes !== undefined &&
            input.DeploymentDurationInMinutes !== null && { DeploymentDurationInMinutes: input.DeploymentDurationInMinutes }),
        ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
        ...(input.FinalBakeTimeInMinutes !== undefined &&
            input.FinalBakeTimeInMinutes !== null && { FinalBakeTimeInMinutes: input.FinalBakeTimeInMinutes }),
        ...(input.GrowthFactor !== undefined && input.GrowthFactor !== null && { GrowthFactor: input.GrowthFactor }),
        ...(input.GrowthType !== undefined && input.GrowthType !== null && { GrowthType: input.GrowthType }),
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
        ...(input.ReplicateTo !== undefined && input.ReplicateTo !== null && { ReplicateTo: input.ReplicateTo }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_restJson1TagMap(input.Tags, context) }),
    });
    const { hostname, protocol = "https", port } = await context.endpoint();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateDeploymentStrategyCommand = serializeAws_restJson1CreateDeploymentStrategyCommand;
const serializeAws_restJson1CreateEnvironmentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = "/applications/{ApplicationId}/environments";
    if (input.ApplicationId !== undefined) {
        const labelValue = input.ApplicationId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: ApplicationId.");
        }
        resolvedPath = resolvedPath.replace("{ApplicationId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: ApplicationId.");
    }
    let body;
    body = JSON.stringify({
        ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
        ...(input.Monitors !== undefined &&
            input.Monitors !== null && { Monitors: serializeAws_restJson1MonitorList(input.Monitors, context) }),
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_restJson1TagMap(input.Tags, context) }),
    });
    const { hostname, protocol = "https", port } = await context.endpoint();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateEnvironmentCommand = serializeAws_restJson1CreateEnvironmentCommand;
const serializeAws_restJson1CreateHostedConfigurationVersionCommand = async (input, context) => {
    const headers = {
        "content-type": "application/octet-stream",
        ...(isSerializableHeaderValue(input.Description) && { description: input.Description }),
        ...(isSerializableHeaderValue(input.ContentType) && { "content-type": input.ContentType }),
        ...(isSerializableHeaderValue(input.LatestVersionNumber) && {
            "latest-version-number": input.LatestVersionNumber.toString(),
        }),
    };
    let resolvedPath = "/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}/hostedconfigurationversions";
    if (input.ApplicationId !== undefined) {
        const labelValue = input.ApplicationId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: ApplicationId.");
        }
        resolvedPath = resolvedPath.replace("{ApplicationId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: ApplicationId.");
    }
    if (input.ConfigurationProfileId !== undefined) {
        const labelValue = input.ConfigurationProfileId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: ConfigurationProfileId.");
        }
        resolvedPath = resolvedPath.replace("{ConfigurationProfileId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: ConfigurationProfileId.");
    }
    let body;
    if (input.Content !== undefined) {
        body = input.Content;
    }
    const { hostname, protocol = "https", port } = await context.endpoint();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateHostedConfigurationVersionCommand = serializeAws_restJson1CreateHostedConfigurationVersionCommand;
const serializeAws_restJson1DeleteApplicationCommand = async (input, context) => {
    const headers = {};
    let resolvedPath = "/applications/{ApplicationId}";
    if (input.ApplicationId !== undefined) {
        const labelValue = input.ApplicationId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: ApplicationId.");
        }
        resolvedPath = resolvedPath.replace("{ApplicationId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: ApplicationId.");
    }
    let body;
    const { hostname, protocol = "https", port } = await context.endpoint();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteApplicationCommand = serializeAws_restJson1DeleteApplicationCommand;
const serializeAws_restJson1DeleteConfigurationProfileCommand = async (input, context) => {
    const headers = {};
    let resolvedPath = "/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}";
    if (input.ApplicationId !== undefined) {
        const labelValue = input.ApplicationId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: ApplicationId.");
        }
        resolvedPath = resolvedPath.replace("{ApplicationId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: ApplicationId.");
    }
    if (input.ConfigurationProfileId !== undefined) {
        const labelValue = input.ConfigurationProfileId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: ConfigurationProfileId.");
        }
        resolvedPath = resolvedPath.replace("{ConfigurationProfileId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: ConfigurationProfileId.");
    }
    let body;
    const { hostname, protocol = "https", port } = await context.endpoint();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteConfigurationProfileCommand = serializeAws_restJson1DeleteConfigurationProfileCommand;
const serializeAws_restJson1DeleteDeploymentStrategyCommand = async (input, context) => {
    const headers = {};
    let resolvedPath = "/deployementstrategies/{DeploymentStrategyId}";
    if (input.DeploymentStrategyId !== undefined) {
        const labelValue = input.DeploymentStrategyId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: DeploymentStrategyId.");
        }
        resolvedPath = resolvedPath.replace("{DeploymentStrategyId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: DeploymentStrategyId.");
    }
    let body;
    const { hostname, protocol = "https", port } = await context.endpoint();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteDeploymentStrategyCommand = serializeAws_restJson1DeleteDeploymentStrategyCommand;
const serializeAws_restJson1DeleteEnvironmentCommand = async (input, context) => {
    const headers = {};
    let resolvedPath = "/applications/{ApplicationId}/environments/{EnvironmentId}";
    if (input.ApplicationId !== undefined) {
        const labelValue = input.ApplicationId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: ApplicationId.");
        }
        resolvedPath = resolvedPath.replace("{ApplicationId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: ApplicationId.");
    }
    if (input.EnvironmentId !== undefined) {
        const labelValue = input.EnvironmentId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: EnvironmentId.");
        }
        resolvedPath = resolvedPath.replace("{EnvironmentId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: EnvironmentId.");
    }
    let body;
    const { hostname, protocol = "https", port } = await context.endpoint();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteEnvironmentCommand = serializeAws_restJson1DeleteEnvironmentCommand;
const serializeAws_restJson1DeleteHostedConfigurationVersionCommand = async (input, context) => {
    const headers = {};
    let resolvedPath = "/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}/hostedconfigurationversions/{VersionNumber}";
    if (input.ApplicationId !== undefined) {
        const labelValue = input.ApplicationId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: ApplicationId.");
        }
        resolvedPath = resolvedPath.replace("{ApplicationId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: ApplicationId.");
    }
    if (input.ConfigurationProfileId !== undefined) {
        const labelValue = input.ConfigurationProfileId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: ConfigurationProfileId.");
        }
        resolvedPath = resolvedPath.replace("{ConfigurationProfileId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: ConfigurationProfileId.");
    }
    if (input.VersionNumber !== undefined) {
        const labelValue = input.VersionNumber.toString();
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: VersionNumber.");
        }
        resolvedPath = resolvedPath.replace("{VersionNumber}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: VersionNumber.");
    }
    let body;
    const { hostname, protocol = "https", port } = await context.endpoint();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteHostedConfigurationVersionCommand = serializeAws_restJson1DeleteHostedConfigurationVersionCommand;
const serializeAws_restJson1GetApplicationCommand = async (input, context) => {
    const headers = {};
    let resolvedPath = "/applications/{ApplicationId}";
    if (input.ApplicationId !== undefined) {
        const labelValue = input.ApplicationId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: ApplicationId.");
        }
        resolvedPath = resolvedPath.replace("{ApplicationId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: ApplicationId.");
    }
    let body;
    const { hostname, protocol = "https", port } = await context.endpoint();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetApplicationCommand = serializeAws_restJson1GetApplicationCommand;
const serializeAws_restJson1GetConfigurationCommand = async (input, context) => {
    const headers = {};
    let resolvedPath = "/applications/{Application}/environments/{Environment}/configurations/{Configuration}";
    if (input.Application !== undefined) {
        const labelValue = input.Application;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: Application.");
        }
        resolvedPath = resolvedPath.replace("{Application}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: Application.");
    }
    if (input.Environment !== undefined) {
        const labelValue = input.Environment;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: Environment.");
        }
        resolvedPath = resolvedPath.replace("{Environment}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: Environment.");
    }
    if (input.Configuration !== undefined) {
        const labelValue = input.Configuration;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: Configuration.");
        }
        resolvedPath = resolvedPath.replace("{Configuration}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: Configuration.");
    }
    const query = {
        ...(input.ClientId !== undefined && { client_id: input.ClientId }),
        ...(input.ClientConfigurationVersion !== undefined && {
            client_configuration_version: input.ClientConfigurationVersion,
        }),
    };
    let body;
    const { hostname, protocol = "https", port } = await context.endpoint();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetConfigurationCommand = serializeAws_restJson1GetConfigurationCommand;
const serializeAws_restJson1GetConfigurationProfileCommand = async (input, context) => {
    const headers = {};
    let resolvedPath = "/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}";
    if (input.ApplicationId !== undefined) {
        const labelValue = input.ApplicationId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: ApplicationId.");
        }
        resolvedPath = resolvedPath.replace("{ApplicationId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: ApplicationId.");
    }
    if (input.ConfigurationProfileId !== undefined) {
        const labelValue = input.ConfigurationProfileId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: ConfigurationProfileId.");
        }
        resolvedPath = resolvedPath.replace("{ConfigurationProfileId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: ConfigurationProfileId.");
    }
    let body;
    const { hostname, protocol = "https", port } = await context.endpoint();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetConfigurationProfileCommand = serializeAws_restJson1GetConfigurationProfileCommand;
const serializeAws_restJson1GetDeploymentCommand = async (input, context) => {
    const headers = {};
    let resolvedPath = "/applications/{ApplicationId}/environments/{EnvironmentId}/deployments/{DeploymentNumber}";
    if (input.ApplicationId !== undefined) {
        const labelValue = input.ApplicationId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: ApplicationId.");
        }
        resolvedPath = resolvedPath.replace("{ApplicationId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: ApplicationId.");
    }
    if (input.EnvironmentId !== undefined) {
        const labelValue = input.EnvironmentId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: EnvironmentId.");
        }
        resolvedPath = resolvedPath.replace("{EnvironmentId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: EnvironmentId.");
    }
    if (input.DeploymentNumber !== undefined) {
        const labelValue = input.DeploymentNumber.toString();
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: DeploymentNumber.");
        }
        resolvedPath = resolvedPath.replace("{DeploymentNumber}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: DeploymentNumber.");
    }
    let body;
    const { hostname, protocol = "https", port } = await context.endpoint();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetDeploymentCommand = serializeAws_restJson1GetDeploymentCommand;
const serializeAws_restJson1GetDeploymentStrategyCommand = async (input, context) => {
    const headers = {};
    let resolvedPath = "/deploymentstrategies/{DeploymentStrategyId}";
    if (input.DeploymentStrategyId !== undefined) {
        const labelValue = input.DeploymentStrategyId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: DeploymentStrategyId.");
        }
        resolvedPath = resolvedPath.replace("{DeploymentStrategyId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: DeploymentStrategyId.");
    }
    let body;
    const { hostname, protocol = "https", port } = await context.endpoint();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetDeploymentStrategyCommand = serializeAws_restJson1GetDeploymentStrategyCommand;
const serializeAws_restJson1GetEnvironmentCommand = async (input, context) => {
    const headers = {};
    let resolvedPath = "/applications/{ApplicationId}/environments/{EnvironmentId}";
    if (input.ApplicationId !== undefined) {
        const labelValue = input.ApplicationId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: ApplicationId.");
        }
        resolvedPath = resolvedPath.replace("{ApplicationId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: ApplicationId.");
    }
    if (input.EnvironmentId !== undefined) {
        const labelValue = input.EnvironmentId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: EnvironmentId.");
        }
        resolvedPath = resolvedPath.replace("{EnvironmentId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: EnvironmentId.");
    }
    let body;
    const { hostname, protocol = "https", port } = await context.endpoint();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetEnvironmentCommand = serializeAws_restJson1GetEnvironmentCommand;
const serializeAws_restJson1GetHostedConfigurationVersionCommand = async (input, context) => {
    const headers = {};
    let resolvedPath = "/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}/hostedconfigurationversions/{VersionNumber}";
    if (input.ApplicationId !== undefined) {
        const labelValue = input.ApplicationId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: ApplicationId.");
        }
        resolvedPath = resolvedPath.replace("{ApplicationId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: ApplicationId.");
    }
    if (input.ConfigurationProfileId !== undefined) {
        const labelValue = input.ConfigurationProfileId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: ConfigurationProfileId.");
        }
        resolvedPath = resolvedPath.replace("{ConfigurationProfileId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: ConfigurationProfileId.");
    }
    if (input.VersionNumber !== undefined) {
        const labelValue = input.VersionNumber.toString();
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: VersionNumber.");
        }
        resolvedPath = resolvedPath.replace("{VersionNumber}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: VersionNumber.");
    }
    let body;
    const { hostname, protocol = "https", port } = await context.endpoint();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetHostedConfigurationVersionCommand = serializeAws_restJson1GetHostedConfigurationVersionCommand;
const serializeAws_restJson1ListApplicationsCommand = async (input, context) => {
    const headers = {};
    let resolvedPath = "/applications";
    const query = {
        ...(input.MaxResults !== undefined && { max_results: input.MaxResults.toString() }),
        ...(input.NextToken !== undefined && { next_token: input.NextToken }),
    };
    let body;
    const { hostname, protocol = "https", port } = await context.endpoint();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListApplicationsCommand = serializeAws_restJson1ListApplicationsCommand;
const serializeAws_restJson1ListConfigurationProfilesCommand = async (input, context) => {
    const headers = {};
    let resolvedPath = "/applications/{ApplicationId}/configurationprofiles";
    if (input.ApplicationId !== undefined) {
        const labelValue = input.ApplicationId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: ApplicationId.");
        }
        resolvedPath = resolvedPath.replace("{ApplicationId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: ApplicationId.");
    }
    const query = {
        ...(input.MaxResults !== undefined && { max_results: input.MaxResults.toString() }),
        ...(input.NextToken !== undefined && { next_token: input.NextToken }),
    };
    let body;
    const { hostname, protocol = "https", port } = await context.endpoint();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListConfigurationProfilesCommand = serializeAws_restJson1ListConfigurationProfilesCommand;
const serializeAws_restJson1ListDeploymentsCommand = async (input, context) => {
    const headers = {};
    let resolvedPath = "/applications/{ApplicationId}/environments/{EnvironmentId}/deployments";
    if (input.ApplicationId !== undefined) {
        const labelValue = input.ApplicationId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: ApplicationId.");
        }
        resolvedPath = resolvedPath.replace("{ApplicationId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: ApplicationId.");
    }
    if (input.EnvironmentId !== undefined) {
        const labelValue = input.EnvironmentId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: EnvironmentId.");
        }
        resolvedPath = resolvedPath.replace("{EnvironmentId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: EnvironmentId.");
    }
    const query = {
        ...(input.MaxResults !== undefined && { max_results: input.MaxResults.toString() }),
        ...(input.NextToken !== undefined && { next_token: input.NextToken }),
    };
    let body;
    const { hostname, protocol = "https", port } = await context.endpoint();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListDeploymentsCommand = serializeAws_restJson1ListDeploymentsCommand;
const serializeAws_restJson1ListDeploymentStrategiesCommand = async (input, context) => {
    const headers = {};
    let resolvedPath = "/deploymentstrategies";
    const query = {
        ...(input.MaxResults !== undefined && { max_results: input.MaxResults.toString() }),
        ...(input.NextToken !== undefined && { next_token: input.NextToken }),
    };
    let body;
    const { hostname, protocol = "https", port } = await context.endpoint();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListDeploymentStrategiesCommand = serializeAws_restJson1ListDeploymentStrategiesCommand;
const serializeAws_restJson1ListEnvironmentsCommand = async (input, context) => {
    const headers = {};
    let resolvedPath = "/applications/{ApplicationId}/environments";
    if (input.ApplicationId !== undefined) {
        const labelValue = input.ApplicationId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: ApplicationId.");
        }
        resolvedPath = resolvedPath.replace("{ApplicationId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: ApplicationId.");
    }
    const query = {
        ...(input.MaxResults !== undefined && { max_results: input.MaxResults.toString() }),
        ...(input.NextToken !== undefined && { next_token: input.NextToken }),
    };
    let body;
    const { hostname, protocol = "https", port } = await context.endpoint();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListEnvironmentsCommand = serializeAws_restJson1ListEnvironmentsCommand;
const serializeAws_restJson1ListHostedConfigurationVersionsCommand = async (input, context) => {
    const headers = {};
    let resolvedPath = "/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}/hostedconfigurationversions";
    if (input.ApplicationId !== undefined) {
        const labelValue = input.ApplicationId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: ApplicationId.");
        }
        resolvedPath = resolvedPath.replace("{ApplicationId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: ApplicationId.");
    }
    if (input.ConfigurationProfileId !== undefined) {
        const labelValue = input.ConfigurationProfileId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: ConfigurationProfileId.");
        }
        resolvedPath = resolvedPath.replace("{ConfigurationProfileId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: ConfigurationProfileId.");
    }
    const query = {
        ...(input.MaxResults !== undefined && { max_results: input.MaxResults.toString() }),
        ...(input.NextToken !== undefined && { next_token: input.NextToken }),
    };
    let body;
    const { hostname, protocol = "https", port } = await context.endpoint();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ListHostedConfigurationVersionsCommand = serializeAws_restJson1ListHostedConfigurationVersionsCommand;
const serializeAws_restJson1ListTagsForResourceCommand = async (input, context) => {
    const headers = {};
    let resolvedPath = "/tags/{ResourceArn}";
    if (input.ResourceArn !== undefined) {
        const labelValue = input.ResourceArn;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: ResourceArn.");
        }
        resolvedPath = resolvedPath.replace("{ResourceArn}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: ResourceArn.");
    }
    let body;
    const { hostname, protocol = "https", port } = await context.endpoint();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1ListTagsForResourceCommand = serializeAws_restJson1ListTagsForResourceCommand;
const serializeAws_restJson1StartDeploymentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = "/applications/{ApplicationId}/environments/{EnvironmentId}/deployments";
    if (input.ApplicationId !== undefined) {
        const labelValue = input.ApplicationId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: ApplicationId.");
        }
        resolvedPath = resolvedPath.replace("{ApplicationId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: ApplicationId.");
    }
    if (input.EnvironmentId !== undefined) {
        const labelValue = input.EnvironmentId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: EnvironmentId.");
        }
        resolvedPath = resolvedPath.replace("{EnvironmentId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: EnvironmentId.");
    }
    let body;
    body = JSON.stringify({
        ...(input.ConfigurationProfileId !== undefined &&
            input.ConfigurationProfileId !== null && { ConfigurationProfileId: input.ConfigurationProfileId }),
        ...(input.ConfigurationVersion !== undefined &&
            input.ConfigurationVersion !== null && { ConfigurationVersion: input.ConfigurationVersion }),
        ...(input.DeploymentStrategyId !== undefined &&
            input.DeploymentStrategyId !== null && { DeploymentStrategyId: input.DeploymentStrategyId }),
        ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_restJson1TagMap(input.Tags, context) }),
    });
    const { hostname, protocol = "https", port } = await context.endpoint();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1StartDeploymentCommand = serializeAws_restJson1StartDeploymentCommand;
const serializeAws_restJson1StopDeploymentCommand = async (input, context) => {
    const headers = {};
    let resolvedPath = "/applications/{ApplicationId}/environments/{EnvironmentId}/deployments/{DeploymentNumber}";
    if (input.ApplicationId !== undefined) {
        const labelValue = input.ApplicationId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: ApplicationId.");
        }
        resolvedPath = resolvedPath.replace("{ApplicationId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: ApplicationId.");
    }
    if (input.EnvironmentId !== undefined) {
        const labelValue = input.EnvironmentId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: EnvironmentId.");
        }
        resolvedPath = resolvedPath.replace("{EnvironmentId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: EnvironmentId.");
    }
    if (input.DeploymentNumber !== undefined) {
        const labelValue = input.DeploymentNumber.toString();
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: DeploymentNumber.");
        }
        resolvedPath = resolvedPath.replace("{DeploymentNumber}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: DeploymentNumber.");
    }
    let body;
    const { hostname, protocol = "https", port } = await context.endpoint();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1StopDeploymentCommand = serializeAws_restJson1StopDeploymentCommand;
const serializeAws_restJson1TagResourceCommand = async (input, context) => {
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = "/tags/{ResourceArn}";
    if (input.ResourceArn !== undefined) {
        const labelValue = input.ResourceArn;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: ResourceArn.");
        }
        resolvedPath = resolvedPath.replace("{ResourceArn}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: ResourceArn.");
    }
    let body;
    body = JSON.stringify({
        ...(input.Tags !== undefined && input.Tags !== null && { Tags: serializeAws_restJson1TagMap(input.Tags, context) }),
    });
    const { hostname, protocol = "https", port } = await context.endpoint();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1TagResourceCommand = serializeAws_restJson1TagResourceCommand;
const serializeAws_restJson1UntagResourceCommand = async (input, context) => {
    const headers = {};
    let resolvedPath = "/tags/{ResourceArn}";
    if (input.ResourceArn !== undefined) {
        const labelValue = input.ResourceArn;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: ResourceArn.");
        }
        resolvedPath = resolvedPath.replace("{ResourceArn}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: ResourceArn.");
    }
    const query = {
        ...(input.TagKeys !== undefined && { tagKeys: (input.TagKeys || []).map((_entry) => _entry) }),
    };
    let body;
    const { hostname, protocol = "https", port } = await context.endpoint();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1UntagResourceCommand = serializeAws_restJson1UntagResourceCommand;
const serializeAws_restJson1UpdateApplicationCommand = async (input, context) => {
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = "/applications/{ApplicationId}";
    if (input.ApplicationId !== undefined) {
        const labelValue = input.ApplicationId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: ApplicationId.");
        }
        resolvedPath = resolvedPath.replace("{ApplicationId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: ApplicationId.");
    }
    let body;
    body = JSON.stringify({
        ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
    });
    const { hostname, protocol = "https", port } = await context.endpoint();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateApplicationCommand = serializeAws_restJson1UpdateApplicationCommand;
const serializeAws_restJson1UpdateConfigurationProfileCommand = async (input, context) => {
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = "/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}";
    if (input.ApplicationId !== undefined) {
        const labelValue = input.ApplicationId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: ApplicationId.");
        }
        resolvedPath = resolvedPath.replace("{ApplicationId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: ApplicationId.");
    }
    if (input.ConfigurationProfileId !== undefined) {
        const labelValue = input.ConfigurationProfileId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: ConfigurationProfileId.");
        }
        resolvedPath = resolvedPath.replace("{ConfigurationProfileId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: ConfigurationProfileId.");
    }
    let body;
    body = JSON.stringify({
        ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
        ...(input.RetrievalRoleArn !== undefined &&
            input.RetrievalRoleArn !== null && { RetrievalRoleArn: input.RetrievalRoleArn }),
        ...(input.Validators !== undefined &&
            input.Validators !== null && { Validators: serializeAws_restJson1ValidatorList(input.Validators, context) }),
    });
    const { hostname, protocol = "https", port } = await context.endpoint();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateConfigurationProfileCommand = serializeAws_restJson1UpdateConfigurationProfileCommand;
const serializeAws_restJson1UpdateDeploymentStrategyCommand = async (input, context) => {
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = "/deploymentstrategies/{DeploymentStrategyId}";
    if (input.DeploymentStrategyId !== undefined) {
        const labelValue = input.DeploymentStrategyId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: DeploymentStrategyId.");
        }
        resolvedPath = resolvedPath.replace("{DeploymentStrategyId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: DeploymentStrategyId.");
    }
    let body;
    body = JSON.stringify({
        ...(input.DeploymentDurationInMinutes !== undefined &&
            input.DeploymentDurationInMinutes !== null && { DeploymentDurationInMinutes: input.DeploymentDurationInMinutes }),
        ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
        ...(input.FinalBakeTimeInMinutes !== undefined &&
            input.FinalBakeTimeInMinutes !== null && { FinalBakeTimeInMinutes: input.FinalBakeTimeInMinutes }),
        ...(input.GrowthFactor !== undefined && input.GrowthFactor !== null && { GrowthFactor: input.GrowthFactor }),
        ...(input.GrowthType !== undefined && input.GrowthType !== null && { GrowthType: input.GrowthType }),
    });
    const { hostname, protocol = "https", port } = await context.endpoint();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateDeploymentStrategyCommand = serializeAws_restJson1UpdateDeploymentStrategyCommand;
const serializeAws_restJson1UpdateEnvironmentCommand = async (input, context) => {
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = "/applications/{ApplicationId}/environments/{EnvironmentId}";
    if (input.ApplicationId !== undefined) {
        const labelValue = input.ApplicationId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: ApplicationId.");
        }
        resolvedPath = resolvedPath.replace("{ApplicationId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: ApplicationId.");
    }
    if (input.EnvironmentId !== undefined) {
        const labelValue = input.EnvironmentId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: EnvironmentId.");
        }
        resolvedPath = resolvedPath.replace("{EnvironmentId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: EnvironmentId.");
    }
    let body;
    body = JSON.stringify({
        ...(input.Description !== undefined && input.Description !== null && { Description: input.Description }),
        ...(input.Monitors !== undefined &&
            input.Monitors !== null && { Monitors: serializeAws_restJson1MonitorList(input.Monitors, context) }),
        ...(input.Name !== undefined && input.Name !== null && { Name: input.Name }),
    });
    const { hostname, protocol = "https", port } = await context.endpoint();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateEnvironmentCommand = serializeAws_restJson1UpdateEnvironmentCommand;
const serializeAws_restJson1ValidateConfigurationCommand = async (input, context) => {
    const headers = {};
    let resolvedPath = "/applications/{ApplicationId}/configurationprofiles/{ConfigurationProfileId}/validators";
    if (input.ApplicationId !== undefined) {
        const labelValue = input.ApplicationId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: ApplicationId.");
        }
        resolvedPath = resolvedPath.replace("{ApplicationId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: ApplicationId.");
    }
    if (input.ConfigurationProfileId !== undefined) {
        const labelValue = input.ConfigurationProfileId;
        if (labelValue.length <= 0) {
            throw new Error("Empty value provided for input HTTP label: ConfigurationProfileId.");
        }
        resolvedPath = resolvedPath.replace("{ConfigurationProfileId}", smithy_client_1.extendedEncodeURIComponent(labelValue));
    }
    else {
        throw new Error("No value provided for input HTTP label: ConfigurationProfileId.");
    }
    const query = {
        ...(input.ConfigurationVersion !== undefined && { configuration_version: input.ConfigurationVersion }),
    };
    let body;
    const { hostname, protocol = "https", port } = await context.endpoint();
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ValidateConfigurationCommand = serializeAws_restJson1ValidateConfigurationCommand;
const deserializeAws_restJson1CreateApplicationCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateApplicationCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
        Description: undefined,
        Id: undefined,
        Name: undefined,
    };
    const data = await parseBody(output.body, context);
    if (data.Description !== undefined && data.Description !== null) {
        contents.Description = data.Description;
    }
    if (data.Id !== undefined && data.Id !== null) {
        contents.Id = data.Id;
    }
    if (data.Name !== undefined && data.Name !== null) {
        contents.Name = data.Name;
    }
    return Promise.resolve(contents);
};
exports.deserializeAws_restJson1CreateApplicationCommand = deserializeAws_restJson1CreateApplicationCommand;
const deserializeAws_restJson1CreateApplicationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            response = {
                ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            response = {
                ...(await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_restJson1CreateConfigurationProfileCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateConfigurationProfileCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
        ApplicationId: undefined,
        Description: undefined,
        Id: undefined,
        LocationUri: undefined,
        Name: undefined,
        RetrievalRoleArn: undefined,
        Validators: undefined,
    };
    const data = await parseBody(output.body, context);
    if (data.ApplicationId !== undefined && data.ApplicationId !== null) {
        contents.ApplicationId = data.ApplicationId;
    }
    if (data.Description !== undefined && data.Description !== null) {
        contents.Description = data.Description;
    }
    if (data.Id !== undefined && data.Id !== null) {
        contents.Id = data.Id;
    }
    if (data.LocationUri !== undefined && data.LocationUri !== null) {
        contents.LocationUri = data.LocationUri;
    }
    if (data.Name !== undefined && data.Name !== null) {
        contents.Name = data.Name;
    }
    if (data.RetrievalRoleArn !== undefined && data.RetrievalRoleArn !== null) {
        contents.RetrievalRoleArn = data.RetrievalRoleArn;
    }
    if (data.Validators !== undefined && data.Validators !== null) {
        contents.Validators = deserializeAws_restJson1ValidatorList(data.Validators, context);
    }
    return Promise.resolve(contents);
};
exports.deserializeAws_restJson1CreateConfigurationProfileCommand = deserializeAws_restJson1CreateConfigurationProfileCommand;
const deserializeAws_restJson1CreateConfigurationProfileCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            response = {
                ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            response = {
                ...(await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appconfig#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_restJson1CreateDeploymentStrategyCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateDeploymentStrategyCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
        DeploymentDurationInMinutes: undefined,
        Description: undefined,
        FinalBakeTimeInMinutes: undefined,
        GrowthFactor: undefined,
        GrowthType: undefined,
        Id: undefined,
        Name: undefined,
        ReplicateTo: undefined,
    };
    const data = await parseBody(output.body, context);
    if (data.DeploymentDurationInMinutes !== undefined && data.DeploymentDurationInMinutes !== null) {
        contents.DeploymentDurationInMinutes = data.DeploymentDurationInMinutes;
    }
    if (data.Description !== undefined && data.Description !== null) {
        contents.Description = data.Description;
    }
    if (data.FinalBakeTimeInMinutes !== undefined && data.FinalBakeTimeInMinutes !== null) {
        contents.FinalBakeTimeInMinutes = data.FinalBakeTimeInMinutes;
    }
    if (data.GrowthFactor !== undefined && data.GrowthFactor !== null) {
        contents.GrowthFactor = data.GrowthFactor;
    }
    if (data.GrowthType !== undefined && data.GrowthType !== null) {
        contents.GrowthType = data.GrowthType;
    }
    if (data.Id !== undefined && data.Id !== null) {
        contents.Id = data.Id;
    }
    if (data.Name !== undefined && data.Name !== null) {
        contents.Name = data.Name;
    }
    if (data.ReplicateTo !== undefined && data.ReplicateTo !== null) {
        contents.ReplicateTo = data.ReplicateTo;
    }
    return Promise.resolve(contents);
};
exports.deserializeAws_restJson1CreateDeploymentStrategyCommand = deserializeAws_restJson1CreateDeploymentStrategyCommand;
const deserializeAws_restJson1CreateDeploymentStrategyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            response = {
                ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            response = {
                ...(await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_restJson1CreateEnvironmentCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateEnvironmentCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
        ApplicationId: undefined,
        Description: undefined,
        Id: undefined,
        Monitors: undefined,
        Name: undefined,
        State: undefined,
    };
    const data = await parseBody(output.body, context);
    if (data.ApplicationId !== undefined && data.ApplicationId !== null) {
        contents.ApplicationId = data.ApplicationId;
    }
    if (data.Description !== undefined && data.Description !== null) {
        contents.Description = data.Description;
    }
    if (data.Id !== undefined && data.Id !== null) {
        contents.Id = data.Id;
    }
    if (data.Monitors !== undefined && data.Monitors !== null) {
        contents.Monitors = deserializeAws_restJson1MonitorList(data.Monitors, context);
    }
    if (data.Name !== undefined && data.Name !== null) {
        contents.Name = data.Name;
    }
    if (data.State !== undefined && data.State !== null) {
        contents.State = data.State;
    }
    return Promise.resolve(contents);
};
exports.deserializeAws_restJson1CreateEnvironmentCommand = deserializeAws_restJson1CreateEnvironmentCommand;
const deserializeAws_restJson1CreateEnvironmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            response = {
                ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            response = {
                ...(await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appconfig#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_restJson1CreateHostedConfigurationVersionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateHostedConfigurationVersionCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
        ApplicationId: undefined,
        ConfigurationProfileId: undefined,
        Content: undefined,
        ContentType: undefined,
        Description: undefined,
        VersionNumber: undefined,
    };
    if (output.headers["application-id"] !== undefined) {
        contents.ApplicationId = output.headers["application-id"];
    }
    if (output.headers["configuration-profile-id"] !== undefined) {
        contents.ConfigurationProfileId = output.headers["configuration-profile-id"];
    }
    if (output.headers["version-number"] !== undefined) {
        contents.VersionNumber = parseInt(output.headers["version-number"], 10);
    }
    if (output.headers["description"] !== undefined) {
        contents.Description = output.headers["description"];
    }
    if (output.headers["content-type"] !== undefined) {
        contents.ContentType = output.headers["content-type"];
    }
    const data = await collectBody(output.body, context);
    contents.Content = data;
    return Promise.resolve(contents);
};
exports.deserializeAws_restJson1CreateHostedConfigurationVersionCommand = deserializeAws_restJson1CreateHostedConfigurationVersionCommand;
const deserializeAws_restJson1CreateHostedConfigurationVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            response = {
                ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ConflictException":
        case "com.amazonaws.appconfig#ConflictException":
            response = {
                ...(await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            response = {
                ...(await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "PayloadTooLargeException":
        case "com.amazonaws.appconfig#PayloadTooLargeException":
            response = {
                ...(await deserializeAws_restJson1PayloadTooLargeExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appconfig#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ServiceQuotaExceededException":
        case "com.amazonaws.appconfig#ServiceQuotaExceededException":
            response = {
                ...(await deserializeAws_restJson1ServiceQuotaExceededExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_restJson1DeleteApplicationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteApplicationCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
};
exports.deserializeAws_restJson1DeleteApplicationCommand = deserializeAws_restJson1DeleteApplicationCommand;
const deserializeAws_restJson1DeleteApplicationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            response = {
                ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            response = {
                ...(await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appconfig#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_restJson1DeleteConfigurationProfileCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteConfigurationProfileCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
};
exports.deserializeAws_restJson1DeleteConfigurationProfileCommand = deserializeAws_restJson1DeleteConfigurationProfileCommand;
const deserializeAws_restJson1DeleteConfigurationProfileCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            response = {
                ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ConflictException":
        case "com.amazonaws.appconfig#ConflictException":
            response = {
                ...(await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            response = {
                ...(await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appconfig#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_restJson1DeleteDeploymentStrategyCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteDeploymentStrategyCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
};
exports.deserializeAws_restJson1DeleteDeploymentStrategyCommand = deserializeAws_restJson1DeleteDeploymentStrategyCommand;
const deserializeAws_restJson1DeleteDeploymentStrategyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            response = {
                ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            response = {
                ...(await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appconfig#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_restJson1DeleteEnvironmentCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteEnvironmentCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
};
exports.deserializeAws_restJson1DeleteEnvironmentCommand = deserializeAws_restJson1DeleteEnvironmentCommand;
const deserializeAws_restJson1DeleteEnvironmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            response = {
                ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ConflictException":
        case "com.amazonaws.appconfig#ConflictException":
            response = {
                ...(await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            response = {
                ...(await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appconfig#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_restJson1DeleteHostedConfigurationVersionCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteHostedConfigurationVersionCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
};
exports.deserializeAws_restJson1DeleteHostedConfigurationVersionCommand = deserializeAws_restJson1DeleteHostedConfigurationVersionCommand;
const deserializeAws_restJson1DeleteHostedConfigurationVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            response = {
                ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            response = {
                ...(await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appconfig#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_restJson1GetApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetApplicationCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
        Description: undefined,
        Id: undefined,
        Name: undefined,
    };
    const data = await parseBody(output.body, context);
    if (data.Description !== undefined && data.Description !== null) {
        contents.Description = data.Description;
    }
    if (data.Id !== undefined && data.Id !== null) {
        contents.Id = data.Id;
    }
    if (data.Name !== undefined && data.Name !== null) {
        contents.Name = data.Name;
    }
    return Promise.resolve(contents);
};
exports.deserializeAws_restJson1GetApplicationCommand = deserializeAws_restJson1GetApplicationCommand;
const deserializeAws_restJson1GetApplicationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            response = {
                ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            response = {
                ...(await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appconfig#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_restJson1GetConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetConfigurationCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
        ConfigurationVersion: undefined,
        Content: undefined,
        ContentType: undefined,
    };
    if (output.headers["configuration-version"] !== undefined) {
        contents.ConfigurationVersion = output.headers["configuration-version"];
    }
    if (output.headers["content-type"] !== undefined) {
        contents.ContentType = output.headers["content-type"];
    }
    const data = await collectBody(output.body, context);
    contents.Content = data;
    return Promise.resolve(contents);
};
exports.deserializeAws_restJson1GetConfigurationCommand = deserializeAws_restJson1GetConfigurationCommand;
const deserializeAws_restJson1GetConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            response = {
                ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            response = {
                ...(await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appconfig#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_restJson1GetConfigurationProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetConfigurationProfileCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
        ApplicationId: undefined,
        Description: undefined,
        Id: undefined,
        LocationUri: undefined,
        Name: undefined,
        RetrievalRoleArn: undefined,
        Validators: undefined,
    };
    const data = await parseBody(output.body, context);
    if (data.ApplicationId !== undefined && data.ApplicationId !== null) {
        contents.ApplicationId = data.ApplicationId;
    }
    if (data.Description !== undefined && data.Description !== null) {
        contents.Description = data.Description;
    }
    if (data.Id !== undefined && data.Id !== null) {
        contents.Id = data.Id;
    }
    if (data.LocationUri !== undefined && data.LocationUri !== null) {
        contents.LocationUri = data.LocationUri;
    }
    if (data.Name !== undefined && data.Name !== null) {
        contents.Name = data.Name;
    }
    if (data.RetrievalRoleArn !== undefined && data.RetrievalRoleArn !== null) {
        contents.RetrievalRoleArn = data.RetrievalRoleArn;
    }
    if (data.Validators !== undefined && data.Validators !== null) {
        contents.Validators = deserializeAws_restJson1ValidatorList(data.Validators, context);
    }
    return Promise.resolve(contents);
};
exports.deserializeAws_restJson1GetConfigurationProfileCommand = deserializeAws_restJson1GetConfigurationProfileCommand;
const deserializeAws_restJson1GetConfigurationProfileCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            response = {
                ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            response = {
                ...(await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appconfig#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_restJson1GetDeploymentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetDeploymentCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
        ApplicationId: undefined,
        CompletedAt: undefined,
        ConfigurationLocationUri: undefined,
        ConfigurationName: undefined,
        ConfigurationProfileId: undefined,
        ConfigurationVersion: undefined,
        DeploymentDurationInMinutes: undefined,
        DeploymentNumber: undefined,
        DeploymentStrategyId: undefined,
        Description: undefined,
        EnvironmentId: undefined,
        EventLog: undefined,
        FinalBakeTimeInMinutes: undefined,
        GrowthFactor: undefined,
        GrowthType: undefined,
        PercentageComplete: undefined,
        StartedAt: undefined,
        State: undefined,
    };
    const data = await parseBody(output.body, context);
    if (data.ApplicationId !== undefined && data.ApplicationId !== null) {
        contents.ApplicationId = data.ApplicationId;
    }
    if (data.CompletedAt !== undefined && data.CompletedAt !== null) {
        contents.CompletedAt = new Date(data.CompletedAt);
    }
    if (data.ConfigurationLocationUri !== undefined && data.ConfigurationLocationUri !== null) {
        contents.ConfigurationLocationUri = data.ConfigurationLocationUri;
    }
    if (data.ConfigurationName !== undefined && data.ConfigurationName !== null) {
        contents.ConfigurationName = data.ConfigurationName;
    }
    if (data.ConfigurationProfileId !== undefined && data.ConfigurationProfileId !== null) {
        contents.ConfigurationProfileId = data.ConfigurationProfileId;
    }
    if (data.ConfigurationVersion !== undefined && data.ConfigurationVersion !== null) {
        contents.ConfigurationVersion = data.ConfigurationVersion;
    }
    if (data.DeploymentDurationInMinutes !== undefined && data.DeploymentDurationInMinutes !== null) {
        contents.DeploymentDurationInMinutes = data.DeploymentDurationInMinutes;
    }
    if (data.DeploymentNumber !== undefined && data.DeploymentNumber !== null) {
        contents.DeploymentNumber = data.DeploymentNumber;
    }
    if (data.DeploymentStrategyId !== undefined && data.DeploymentStrategyId !== null) {
        contents.DeploymentStrategyId = data.DeploymentStrategyId;
    }
    if (data.Description !== undefined && data.Description !== null) {
        contents.Description = data.Description;
    }
    if (data.EnvironmentId !== undefined && data.EnvironmentId !== null) {
        contents.EnvironmentId = data.EnvironmentId;
    }
    if (data.EventLog !== undefined && data.EventLog !== null) {
        contents.EventLog = deserializeAws_restJson1DeploymentEvents(data.EventLog, context);
    }
    if (data.FinalBakeTimeInMinutes !== undefined && data.FinalBakeTimeInMinutes !== null) {
        contents.FinalBakeTimeInMinutes = data.FinalBakeTimeInMinutes;
    }
    if (data.GrowthFactor !== undefined && data.GrowthFactor !== null) {
        contents.GrowthFactor = data.GrowthFactor;
    }
    if (data.GrowthType !== undefined && data.GrowthType !== null) {
        contents.GrowthType = data.GrowthType;
    }
    if (data.PercentageComplete !== undefined && data.PercentageComplete !== null) {
        contents.PercentageComplete = data.PercentageComplete;
    }
    if (data.StartedAt !== undefined && data.StartedAt !== null) {
        contents.StartedAt = new Date(data.StartedAt);
    }
    if (data.State !== undefined && data.State !== null) {
        contents.State = data.State;
    }
    return Promise.resolve(contents);
};
exports.deserializeAws_restJson1GetDeploymentCommand = deserializeAws_restJson1GetDeploymentCommand;
const deserializeAws_restJson1GetDeploymentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            response = {
                ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            response = {
                ...(await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appconfig#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_restJson1GetDeploymentStrategyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetDeploymentStrategyCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
        DeploymentDurationInMinutes: undefined,
        Description: undefined,
        FinalBakeTimeInMinutes: undefined,
        GrowthFactor: undefined,
        GrowthType: undefined,
        Id: undefined,
        Name: undefined,
        ReplicateTo: undefined,
    };
    const data = await parseBody(output.body, context);
    if (data.DeploymentDurationInMinutes !== undefined && data.DeploymentDurationInMinutes !== null) {
        contents.DeploymentDurationInMinutes = data.DeploymentDurationInMinutes;
    }
    if (data.Description !== undefined && data.Description !== null) {
        contents.Description = data.Description;
    }
    if (data.FinalBakeTimeInMinutes !== undefined && data.FinalBakeTimeInMinutes !== null) {
        contents.FinalBakeTimeInMinutes = data.FinalBakeTimeInMinutes;
    }
    if (data.GrowthFactor !== undefined && data.GrowthFactor !== null) {
        contents.GrowthFactor = data.GrowthFactor;
    }
    if (data.GrowthType !== undefined && data.GrowthType !== null) {
        contents.GrowthType = data.GrowthType;
    }
    if (data.Id !== undefined && data.Id !== null) {
        contents.Id = data.Id;
    }
    if (data.Name !== undefined && data.Name !== null) {
        contents.Name = data.Name;
    }
    if (data.ReplicateTo !== undefined && data.ReplicateTo !== null) {
        contents.ReplicateTo = data.ReplicateTo;
    }
    return Promise.resolve(contents);
};
exports.deserializeAws_restJson1GetDeploymentStrategyCommand = deserializeAws_restJson1GetDeploymentStrategyCommand;
const deserializeAws_restJson1GetDeploymentStrategyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            response = {
                ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            response = {
                ...(await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appconfig#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_restJson1GetEnvironmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetEnvironmentCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
        ApplicationId: undefined,
        Description: undefined,
        Id: undefined,
        Monitors: undefined,
        Name: undefined,
        State: undefined,
    };
    const data = await parseBody(output.body, context);
    if (data.ApplicationId !== undefined && data.ApplicationId !== null) {
        contents.ApplicationId = data.ApplicationId;
    }
    if (data.Description !== undefined && data.Description !== null) {
        contents.Description = data.Description;
    }
    if (data.Id !== undefined && data.Id !== null) {
        contents.Id = data.Id;
    }
    if (data.Monitors !== undefined && data.Monitors !== null) {
        contents.Monitors = deserializeAws_restJson1MonitorList(data.Monitors, context);
    }
    if (data.Name !== undefined && data.Name !== null) {
        contents.Name = data.Name;
    }
    if (data.State !== undefined && data.State !== null) {
        contents.State = data.State;
    }
    return Promise.resolve(contents);
};
exports.deserializeAws_restJson1GetEnvironmentCommand = deserializeAws_restJson1GetEnvironmentCommand;
const deserializeAws_restJson1GetEnvironmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            response = {
                ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            response = {
                ...(await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appconfig#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_restJson1GetHostedConfigurationVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetHostedConfigurationVersionCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
        ApplicationId: undefined,
        ConfigurationProfileId: undefined,
        Content: undefined,
        ContentType: undefined,
        Description: undefined,
        VersionNumber: undefined,
    };
    if (output.headers["application-id"] !== undefined) {
        contents.ApplicationId = output.headers["application-id"];
    }
    if (output.headers["configuration-profile-id"] !== undefined) {
        contents.ConfigurationProfileId = output.headers["configuration-profile-id"];
    }
    if (output.headers["version-number"] !== undefined) {
        contents.VersionNumber = parseInt(output.headers["version-number"], 10);
    }
    if (output.headers["description"] !== undefined) {
        contents.Description = output.headers["description"];
    }
    if (output.headers["content-type"] !== undefined) {
        contents.ContentType = output.headers["content-type"];
    }
    const data = await collectBody(output.body, context);
    contents.Content = data;
    return Promise.resolve(contents);
};
exports.deserializeAws_restJson1GetHostedConfigurationVersionCommand = deserializeAws_restJson1GetHostedConfigurationVersionCommand;
const deserializeAws_restJson1GetHostedConfigurationVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            response = {
                ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            response = {
                ...(await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appconfig#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_restJson1ListApplicationsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListApplicationsCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
        Items: undefined,
        NextToken: undefined,
    };
    const data = await parseBody(output.body, context);
    if (data.Items !== undefined && data.Items !== null) {
        contents.Items = deserializeAws_restJson1ApplicationList(data.Items, context);
    }
    if (data.NextToken !== undefined && data.NextToken !== null) {
        contents.NextToken = data.NextToken;
    }
    return Promise.resolve(contents);
};
exports.deserializeAws_restJson1ListApplicationsCommand = deserializeAws_restJson1ListApplicationsCommand;
const deserializeAws_restJson1ListApplicationsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            response = {
                ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            response = {
                ...(await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_restJson1ListConfigurationProfilesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListConfigurationProfilesCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
        Items: undefined,
        NextToken: undefined,
    };
    const data = await parseBody(output.body, context);
    if (data.Items !== undefined && data.Items !== null) {
        contents.Items = deserializeAws_restJson1ConfigurationProfileSummaryList(data.Items, context);
    }
    if (data.NextToken !== undefined && data.NextToken !== null) {
        contents.NextToken = data.NextToken;
    }
    return Promise.resolve(contents);
};
exports.deserializeAws_restJson1ListConfigurationProfilesCommand = deserializeAws_restJson1ListConfigurationProfilesCommand;
const deserializeAws_restJson1ListConfigurationProfilesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            response = {
                ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            response = {
                ...(await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appconfig#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_restJson1ListDeploymentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListDeploymentsCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
        Items: undefined,
        NextToken: undefined,
    };
    const data = await parseBody(output.body, context);
    if (data.Items !== undefined && data.Items !== null) {
        contents.Items = deserializeAws_restJson1DeploymentList(data.Items, context);
    }
    if (data.NextToken !== undefined && data.NextToken !== null) {
        contents.NextToken = data.NextToken;
    }
    return Promise.resolve(contents);
};
exports.deserializeAws_restJson1ListDeploymentsCommand = deserializeAws_restJson1ListDeploymentsCommand;
const deserializeAws_restJson1ListDeploymentsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            response = {
                ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            response = {
                ...(await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appconfig#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_restJson1ListDeploymentStrategiesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListDeploymentStrategiesCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
        Items: undefined,
        NextToken: undefined,
    };
    const data = await parseBody(output.body, context);
    if (data.Items !== undefined && data.Items !== null) {
        contents.Items = deserializeAws_restJson1DeploymentStrategyList(data.Items, context);
    }
    if (data.NextToken !== undefined && data.NextToken !== null) {
        contents.NextToken = data.NextToken;
    }
    return Promise.resolve(contents);
};
exports.deserializeAws_restJson1ListDeploymentStrategiesCommand = deserializeAws_restJson1ListDeploymentStrategiesCommand;
const deserializeAws_restJson1ListDeploymentStrategiesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            response = {
                ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            response = {
                ...(await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_restJson1ListEnvironmentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListEnvironmentsCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
        Items: undefined,
        NextToken: undefined,
    };
    const data = await parseBody(output.body, context);
    if (data.Items !== undefined && data.Items !== null) {
        contents.Items = deserializeAws_restJson1EnvironmentList(data.Items, context);
    }
    if (data.NextToken !== undefined && data.NextToken !== null) {
        contents.NextToken = data.NextToken;
    }
    return Promise.resolve(contents);
};
exports.deserializeAws_restJson1ListEnvironmentsCommand = deserializeAws_restJson1ListEnvironmentsCommand;
const deserializeAws_restJson1ListEnvironmentsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            response = {
                ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            response = {
                ...(await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appconfig#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_restJson1ListHostedConfigurationVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListHostedConfigurationVersionsCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
        Items: undefined,
        NextToken: undefined,
    };
    const data = await parseBody(output.body, context);
    if (data.Items !== undefined && data.Items !== null) {
        contents.Items = deserializeAws_restJson1HostedConfigurationVersionSummaryList(data.Items, context);
    }
    if (data.NextToken !== undefined && data.NextToken !== null) {
        contents.NextToken = data.NextToken;
    }
    return Promise.resolve(contents);
};
exports.deserializeAws_restJson1ListHostedConfigurationVersionsCommand = deserializeAws_restJson1ListHostedConfigurationVersionsCommand;
const deserializeAws_restJson1ListHostedConfigurationVersionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            response = {
                ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            response = {
                ...(await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appconfig#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_restJson1ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListTagsForResourceCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
        Tags: undefined,
    };
    const data = await parseBody(output.body, context);
    if (data.Tags !== undefined && data.Tags !== null) {
        contents.Tags = deserializeAws_restJson1TagMap(data.Tags, context);
    }
    return Promise.resolve(contents);
};
exports.deserializeAws_restJson1ListTagsForResourceCommand = deserializeAws_restJson1ListTagsForResourceCommand;
const deserializeAws_restJson1ListTagsForResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            response = {
                ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            response = {
                ...(await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appconfig#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_restJson1StartDeploymentCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1StartDeploymentCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
        ApplicationId: undefined,
        CompletedAt: undefined,
        ConfigurationLocationUri: undefined,
        ConfigurationName: undefined,
        ConfigurationProfileId: undefined,
        ConfigurationVersion: undefined,
        DeploymentDurationInMinutes: undefined,
        DeploymentNumber: undefined,
        DeploymentStrategyId: undefined,
        Description: undefined,
        EnvironmentId: undefined,
        EventLog: undefined,
        FinalBakeTimeInMinutes: undefined,
        GrowthFactor: undefined,
        GrowthType: undefined,
        PercentageComplete: undefined,
        StartedAt: undefined,
        State: undefined,
    };
    const data = await parseBody(output.body, context);
    if (data.ApplicationId !== undefined && data.ApplicationId !== null) {
        contents.ApplicationId = data.ApplicationId;
    }
    if (data.CompletedAt !== undefined && data.CompletedAt !== null) {
        contents.CompletedAt = new Date(data.CompletedAt);
    }
    if (data.ConfigurationLocationUri !== undefined && data.ConfigurationLocationUri !== null) {
        contents.ConfigurationLocationUri = data.ConfigurationLocationUri;
    }
    if (data.ConfigurationName !== undefined && data.ConfigurationName !== null) {
        contents.ConfigurationName = data.ConfigurationName;
    }
    if (data.ConfigurationProfileId !== undefined && data.ConfigurationProfileId !== null) {
        contents.ConfigurationProfileId = data.ConfigurationProfileId;
    }
    if (data.ConfigurationVersion !== undefined && data.ConfigurationVersion !== null) {
        contents.ConfigurationVersion = data.ConfigurationVersion;
    }
    if (data.DeploymentDurationInMinutes !== undefined && data.DeploymentDurationInMinutes !== null) {
        contents.DeploymentDurationInMinutes = data.DeploymentDurationInMinutes;
    }
    if (data.DeploymentNumber !== undefined && data.DeploymentNumber !== null) {
        contents.DeploymentNumber = data.DeploymentNumber;
    }
    if (data.DeploymentStrategyId !== undefined && data.DeploymentStrategyId !== null) {
        contents.DeploymentStrategyId = data.DeploymentStrategyId;
    }
    if (data.Description !== undefined && data.Description !== null) {
        contents.Description = data.Description;
    }
    if (data.EnvironmentId !== undefined && data.EnvironmentId !== null) {
        contents.EnvironmentId = data.EnvironmentId;
    }
    if (data.EventLog !== undefined && data.EventLog !== null) {
        contents.EventLog = deserializeAws_restJson1DeploymentEvents(data.EventLog, context);
    }
    if (data.FinalBakeTimeInMinutes !== undefined && data.FinalBakeTimeInMinutes !== null) {
        contents.FinalBakeTimeInMinutes = data.FinalBakeTimeInMinutes;
    }
    if (data.GrowthFactor !== undefined && data.GrowthFactor !== null) {
        contents.GrowthFactor = data.GrowthFactor;
    }
    if (data.GrowthType !== undefined && data.GrowthType !== null) {
        contents.GrowthType = data.GrowthType;
    }
    if (data.PercentageComplete !== undefined && data.PercentageComplete !== null) {
        contents.PercentageComplete = data.PercentageComplete;
    }
    if (data.StartedAt !== undefined && data.StartedAt !== null) {
        contents.StartedAt = new Date(data.StartedAt);
    }
    if (data.State !== undefined && data.State !== null) {
        contents.State = data.State;
    }
    return Promise.resolve(contents);
};
exports.deserializeAws_restJson1StartDeploymentCommand = deserializeAws_restJson1StartDeploymentCommand;
const deserializeAws_restJson1StartDeploymentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            response = {
                ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ConflictException":
        case "com.amazonaws.appconfig#ConflictException":
            response = {
                ...(await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            response = {
                ...(await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appconfig#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_restJson1StopDeploymentCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1StopDeploymentCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
        ApplicationId: undefined,
        CompletedAt: undefined,
        ConfigurationLocationUri: undefined,
        ConfigurationName: undefined,
        ConfigurationProfileId: undefined,
        ConfigurationVersion: undefined,
        DeploymentDurationInMinutes: undefined,
        DeploymentNumber: undefined,
        DeploymentStrategyId: undefined,
        Description: undefined,
        EnvironmentId: undefined,
        EventLog: undefined,
        FinalBakeTimeInMinutes: undefined,
        GrowthFactor: undefined,
        GrowthType: undefined,
        PercentageComplete: undefined,
        StartedAt: undefined,
        State: undefined,
    };
    const data = await parseBody(output.body, context);
    if (data.ApplicationId !== undefined && data.ApplicationId !== null) {
        contents.ApplicationId = data.ApplicationId;
    }
    if (data.CompletedAt !== undefined && data.CompletedAt !== null) {
        contents.CompletedAt = new Date(data.CompletedAt);
    }
    if (data.ConfigurationLocationUri !== undefined && data.ConfigurationLocationUri !== null) {
        contents.ConfigurationLocationUri = data.ConfigurationLocationUri;
    }
    if (data.ConfigurationName !== undefined && data.ConfigurationName !== null) {
        contents.ConfigurationName = data.ConfigurationName;
    }
    if (data.ConfigurationProfileId !== undefined && data.ConfigurationProfileId !== null) {
        contents.ConfigurationProfileId = data.ConfigurationProfileId;
    }
    if (data.ConfigurationVersion !== undefined && data.ConfigurationVersion !== null) {
        contents.ConfigurationVersion = data.ConfigurationVersion;
    }
    if (data.DeploymentDurationInMinutes !== undefined && data.DeploymentDurationInMinutes !== null) {
        contents.DeploymentDurationInMinutes = data.DeploymentDurationInMinutes;
    }
    if (data.DeploymentNumber !== undefined && data.DeploymentNumber !== null) {
        contents.DeploymentNumber = data.DeploymentNumber;
    }
    if (data.DeploymentStrategyId !== undefined && data.DeploymentStrategyId !== null) {
        contents.DeploymentStrategyId = data.DeploymentStrategyId;
    }
    if (data.Description !== undefined && data.Description !== null) {
        contents.Description = data.Description;
    }
    if (data.EnvironmentId !== undefined && data.EnvironmentId !== null) {
        contents.EnvironmentId = data.EnvironmentId;
    }
    if (data.EventLog !== undefined && data.EventLog !== null) {
        contents.EventLog = deserializeAws_restJson1DeploymentEvents(data.EventLog, context);
    }
    if (data.FinalBakeTimeInMinutes !== undefined && data.FinalBakeTimeInMinutes !== null) {
        contents.FinalBakeTimeInMinutes = data.FinalBakeTimeInMinutes;
    }
    if (data.GrowthFactor !== undefined && data.GrowthFactor !== null) {
        contents.GrowthFactor = data.GrowthFactor;
    }
    if (data.GrowthType !== undefined && data.GrowthType !== null) {
        contents.GrowthType = data.GrowthType;
    }
    if (data.PercentageComplete !== undefined && data.PercentageComplete !== null) {
        contents.PercentageComplete = data.PercentageComplete;
    }
    if (data.StartedAt !== undefined && data.StartedAt !== null) {
        contents.StartedAt = new Date(data.StartedAt);
    }
    if (data.State !== undefined && data.State !== null) {
        contents.State = data.State;
    }
    return Promise.resolve(contents);
};
exports.deserializeAws_restJson1StopDeploymentCommand = deserializeAws_restJson1StopDeploymentCommand;
const deserializeAws_restJson1StopDeploymentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            response = {
                ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            response = {
                ...(await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appconfig#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_restJson1TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1TagResourceCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
};
exports.deserializeAws_restJson1TagResourceCommand = deserializeAws_restJson1TagResourceCommand;
const deserializeAws_restJson1TagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            response = {
                ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            response = {
                ...(await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appconfig#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_restJson1UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1UntagResourceCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
};
exports.deserializeAws_restJson1UntagResourceCommand = deserializeAws_restJson1UntagResourceCommand;
const deserializeAws_restJson1UntagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            response = {
                ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            response = {
                ...(await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appconfig#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_restJson1UpdateApplicationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateApplicationCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
        Description: undefined,
        Id: undefined,
        Name: undefined,
    };
    const data = await parseBody(output.body, context);
    if (data.Description !== undefined && data.Description !== null) {
        contents.Description = data.Description;
    }
    if (data.Id !== undefined && data.Id !== null) {
        contents.Id = data.Id;
    }
    if (data.Name !== undefined && data.Name !== null) {
        contents.Name = data.Name;
    }
    return Promise.resolve(contents);
};
exports.deserializeAws_restJson1UpdateApplicationCommand = deserializeAws_restJson1UpdateApplicationCommand;
const deserializeAws_restJson1UpdateApplicationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            response = {
                ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            response = {
                ...(await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appconfig#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_restJson1UpdateConfigurationProfileCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateConfigurationProfileCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
        ApplicationId: undefined,
        Description: undefined,
        Id: undefined,
        LocationUri: undefined,
        Name: undefined,
        RetrievalRoleArn: undefined,
        Validators: undefined,
    };
    const data = await parseBody(output.body, context);
    if (data.ApplicationId !== undefined && data.ApplicationId !== null) {
        contents.ApplicationId = data.ApplicationId;
    }
    if (data.Description !== undefined && data.Description !== null) {
        contents.Description = data.Description;
    }
    if (data.Id !== undefined && data.Id !== null) {
        contents.Id = data.Id;
    }
    if (data.LocationUri !== undefined && data.LocationUri !== null) {
        contents.LocationUri = data.LocationUri;
    }
    if (data.Name !== undefined && data.Name !== null) {
        contents.Name = data.Name;
    }
    if (data.RetrievalRoleArn !== undefined && data.RetrievalRoleArn !== null) {
        contents.RetrievalRoleArn = data.RetrievalRoleArn;
    }
    if (data.Validators !== undefined && data.Validators !== null) {
        contents.Validators = deserializeAws_restJson1ValidatorList(data.Validators, context);
    }
    return Promise.resolve(contents);
};
exports.deserializeAws_restJson1UpdateConfigurationProfileCommand = deserializeAws_restJson1UpdateConfigurationProfileCommand;
const deserializeAws_restJson1UpdateConfigurationProfileCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            response = {
                ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            response = {
                ...(await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appconfig#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_restJson1UpdateDeploymentStrategyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateDeploymentStrategyCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
        DeploymentDurationInMinutes: undefined,
        Description: undefined,
        FinalBakeTimeInMinutes: undefined,
        GrowthFactor: undefined,
        GrowthType: undefined,
        Id: undefined,
        Name: undefined,
        ReplicateTo: undefined,
    };
    const data = await parseBody(output.body, context);
    if (data.DeploymentDurationInMinutes !== undefined && data.DeploymentDurationInMinutes !== null) {
        contents.DeploymentDurationInMinutes = data.DeploymentDurationInMinutes;
    }
    if (data.Description !== undefined && data.Description !== null) {
        contents.Description = data.Description;
    }
    if (data.FinalBakeTimeInMinutes !== undefined && data.FinalBakeTimeInMinutes !== null) {
        contents.FinalBakeTimeInMinutes = data.FinalBakeTimeInMinutes;
    }
    if (data.GrowthFactor !== undefined && data.GrowthFactor !== null) {
        contents.GrowthFactor = data.GrowthFactor;
    }
    if (data.GrowthType !== undefined && data.GrowthType !== null) {
        contents.GrowthType = data.GrowthType;
    }
    if (data.Id !== undefined && data.Id !== null) {
        contents.Id = data.Id;
    }
    if (data.Name !== undefined && data.Name !== null) {
        contents.Name = data.Name;
    }
    if (data.ReplicateTo !== undefined && data.ReplicateTo !== null) {
        contents.ReplicateTo = data.ReplicateTo;
    }
    return Promise.resolve(contents);
};
exports.deserializeAws_restJson1UpdateDeploymentStrategyCommand = deserializeAws_restJson1UpdateDeploymentStrategyCommand;
const deserializeAws_restJson1UpdateDeploymentStrategyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            response = {
                ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            response = {
                ...(await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appconfig#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_restJson1UpdateEnvironmentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateEnvironmentCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
        ApplicationId: undefined,
        Description: undefined,
        Id: undefined,
        Monitors: undefined,
        Name: undefined,
        State: undefined,
    };
    const data = await parseBody(output.body, context);
    if (data.ApplicationId !== undefined && data.ApplicationId !== null) {
        contents.ApplicationId = data.ApplicationId;
    }
    if (data.Description !== undefined && data.Description !== null) {
        contents.Description = data.Description;
    }
    if (data.Id !== undefined && data.Id !== null) {
        contents.Id = data.Id;
    }
    if (data.Monitors !== undefined && data.Monitors !== null) {
        contents.Monitors = deserializeAws_restJson1MonitorList(data.Monitors, context);
    }
    if (data.Name !== undefined && data.Name !== null) {
        contents.Name = data.Name;
    }
    if (data.State !== undefined && data.State !== null) {
        contents.State = data.State;
    }
    return Promise.resolve(contents);
};
exports.deserializeAws_restJson1UpdateEnvironmentCommand = deserializeAws_restJson1UpdateEnvironmentCommand;
const deserializeAws_restJson1UpdateEnvironmentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            response = {
                ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            response = {
                ...(await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appconfig#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_restJson1ValidateConfigurationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1ValidateConfigurationCommandError(output, context);
    }
    const contents = {
        $metadata: deserializeMetadata(output),
    };
    await collectBody(output.body, context);
    return Promise.resolve(contents);
};
exports.deserializeAws_restJson1ValidateConfigurationCommand = deserializeAws_restJson1ValidateConfigurationCommand;
const deserializeAws_restJson1ValidateConfigurationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    let response;
    let errorCode = "UnknownError";
    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.appconfig#BadRequestException":
            response = {
                ...(await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "InternalServerException":
        case "com.amazonaws.appconfig#InternalServerException":
            response = {
                ...(await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        case "ResourceNotFoundException":
        case "com.amazonaws.appconfig#ResourceNotFoundException":
            response = {
                ...(await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context)),
                name: errorCode,
                $metadata: deserializeMetadata(output),
            };
            break;
        default:
            const parsedBody = parsedOutput.body;
            errorCode = parsedBody.code || parsedBody.Code || errorCode;
            response = {
                ...parsedBody,
                name: `${errorCode}`,
                message: parsedBody.message || parsedBody.Message || errorCode,
                $fault: "client",
                $metadata: deserializeMetadata(output),
            };
    }
    const message = response.message || response.Message || errorCode;
    response.message = message;
    delete response.Message;
    return Promise.reject(Object.assign(new Error(message), response));
};
const deserializeAws_restJson1BadRequestExceptionResponse = async (parsedOutput, context) => {
    const contents = {
        name: "BadRequestException",
        $fault: "client",
        $metadata: deserializeMetadata(parsedOutput),
        Message: undefined,
    };
    const data = parsedOutput.body;
    if (data.Message !== undefined && data.Message !== null) {
        contents.Message = data.Message;
    }
    return contents;
};
const deserializeAws_restJson1ConflictExceptionResponse = async (parsedOutput, context) => {
    const contents = {
        name: "ConflictException",
        $fault: "client",
        $metadata: deserializeMetadata(parsedOutput),
        Message: undefined,
    };
    const data = parsedOutput.body;
    if (data.Message !== undefined && data.Message !== null) {
        contents.Message = data.Message;
    }
    return contents;
};
const deserializeAws_restJson1InternalServerExceptionResponse = async (parsedOutput, context) => {
    const contents = {
        name: "InternalServerException",
        $fault: "server",
        $metadata: deserializeMetadata(parsedOutput),
        Message: undefined,
    };
    const data = parsedOutput.body;
    if (data.Message !== undefined && data.Message !== null) {
        contents.Message = data.Message;
    }
    return contents;
};
const deserializeAws_restJson1PayloadTooLargeExceptionResponse = async (parsedOutput, context) => {
    const contents = {
        name: "PayloadTooLargeException",
        $fault: "client",
        $metadata: deserializeMetadata(parsedOutput),
        Limit: undefined,
        Measure: undefined,
        Message: undefined,
        Size: undefined,
    };
    const data = parsedOutput.body;
    if (data.Limit !== undefined && data.Limit !== null) {
        contents.Limit = data.Limit;
    }
    if (data.Measure !== undefined && data.Measure !== null) {
        contents.Measure = data.Measure;
    }
    if (data.Message !== undefined && data.Message !== null) {
        contents.Message = data.Message;
    }
    if (data.Size !== undefined && data.Size !== null) {
        contents.Size = data.Size;
    }
    return contents;
};
const deserializeAws_restJson1ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {
    const contents = {
        name: "ResourceNotFoundException",
        $fault: "client",
        $metadata: deserializeMetadata(parsedOutput),
        Message: undefined,
        ResourceName: undefined,
    };
    const data = parsedOutput.body;
    if (data.Message !== undefined && data.Message !== null) {
        contents.Message = data.Message;
    }
    if (data.ResourceName !== undefined && data.ResourceName !== null) {
        contents.ResourceName = data.ResourceName;
    }
    return contents;
};
const deserializeAws_restJson1ServiceQuotaExceededExceptionResponse = async (parsedOutput, context) => {
    const contents = {
        name: "ServiceQuotaExceededException",
        $fault: "client",
        $metadata: deserializeMetadata(parsedOutput),
        Message: undefined,
    };
    const data = parsedOutput.body;
    if (data.Message !== undefined && data.Message !== null) {
        contents.Message = data.Message;
    }
    return contents;
};
const serializeAws_restJson1Monitor = (input, context) => {
    return {
        ...(input.AlarmArn !== undefined && input.AlarmArn !== null && { AlarmArn: input.AlarmArn }),
        ...(input.AlarmRoleArn !== undefined && input.AlarmRoleArn !== null && { AlarmRoleArn: input.AlarmRoleArn }),
    };
};
const serializeAws_restJson1MonitorList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_restJson1Monitor(entry, context);
    });
};
const serializeAws_restJson1TagMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const serializeAws_restJson1Validator = (input, context) => {
    return {
        ...(input.Content !== undefined && input.Content !== null && { Content: input.Content }),
        ...(input.Type !== undefined && input.Type !== null && { Type: input.Type }),
    };
};
const serializeAws_restJson1ValidatorList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return serializeAws_restJson1Validator(entry, context);
    });
};
const deserializeAws_restJson1Application = (output, context) => {
    return {
        Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
        Id: output.Id !== undefined && output.Id !== null ? output.Id : undefined,
        Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,
    };
};
const deserializeAws_restJson1ApplicationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1Application(entry, context);
    });
};
const deserializeAws_restJson1ConfigurationProfileSummary = (output, context) => {
    return {
        ApplicationId: output.ApplicationId !== undefined && output.ApplicationId !== null ? output.ApplicationId : undefined,
        Id: output.Id !== undefined && output.Id !== null ? output.Id : undefined,
        LocationUri: output.LocationUri !== undefined && output.LocationUri !== null ? output.LocationUri : undefined,
        Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,
        ValidatorTypes: output.ValidatorTypes !== undefined && output.ValidatorTypes !== null
            ? deserializeAws_restJson1ValidatorTypeList(output.ValidatorTypes, context)
            : undefined,
    };
};
const deserializeAws_restJson1ConfigurationProfileSummaryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1ConfigurationProfileSummary(entry, context);
    });
};
const deserializeAws_restJson1DeploymentEvent = (output, context) => {
    return {
        Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
        EventType: output.EventType !== undefined && output.EventType !== null ? output.EventType : undefined,
        OccurredAt: output.OccurredAt !== undefined && output.OccurredAt !== null ? new Date(output.OccurredAt) : undefined,
        TriggeredBy: output.TriggeredBy !== undefined && output.TriggeredBy !== null ? output.TriggeredBy : undefined,
    };
};
const deserializeAws_restJson1DeploymentEvents = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1DeploymentEvent(entry, context);
    });
};
const deserializeAws_restJson1DeploymentList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1DeploymentSummary(entry, context);
    });
};
const deserializeAws_restJson1DeploymentStrategy = (output, context) => {
    return {
        DeploymentDurationInMinutes: output.DeploymentDurationInMinutes !== undefined && output.DeploymentDurationInMinutes !== null
            ? output.DeploymentDurationInMinutes
            : undefined,
        Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
        FinalBakeTimeInMinutes: output.FinalBakeTimeInMinutes !== undefined && output.FinalBakeTimeInMinutes !== null
            ? output.FinalBakeTimeInMinutes
            : undefined,
        GrowthFactor: output.GrowthFactor !== undefined && output.GrowthFactor !== null ? output.GrowthFactor : undefined,
        GrowthType: output.GrowthType !== undefined && output.GrowthType !== null ? output.GrowthType : undefined,
        Id: output.Id !== undefined && output.Id !== null ? output.Id : undefined,
        Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,
        ReplicateTo: output.ReplicateTo !== undefined && output.ReplicateTo !== null ? output.ReplicateTo : undefined,
    };
};
const deserializeAws_restJson1DeploymentStrategyList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1DeploymentStrategy(entry, context);
    });
};
const deserializeAws_restJson1DeploymentSummary = (output, context) => {
    return {
        CompletedAt: output.CompletedAt !== undefined && output.CompletedAt !== null ? new Date(output.CompletedAt) : undefined,
        ConfigurationName: output.ConfigurationName !== undefined && output.ConfigurationName !== null
            ? output.ConfigurationName
            : undefined,
        ConfigurationVersion: output.ConfigurationVersion !== undefined && output.ConfigurationVersion !== null
            ? output.ConfigurationVersion
            : undefined,
        DeploymentDurationInMinutes: output.DeploymentDurationInMinutes !== undefined && output.DeploymentDurationInMinutes !== null
            ? output.DeploymentDurationInMinutes
            : undefined,
        DeploymentNumber: output.DeploymentNumber !== undefined && output.DeploymentNumber !== null ? output.DeploymentNumber : undefined,
        FinalBakeTimeInMinutes: output.FinalBakeTimeInMinutes !== undefined && output.FinalBakeTimeInMinutes !== null
            ? output.FinalBakeTimeInMinutes
            : undefined,
        GrowthFactor: output.GrowthFactor !== undefined && output.GrowthFactor !== null ? output.GrowthFactor : undefined,
        GrowthType: output.GrowthType !== undefined && output.GrowthType !== null ? output.GrowthType : undefined,
        PercentageComplete: output.PercentageComplete !== undefined && output.PercentageComplete !== null
            ? output.PercentageComplete
            : undefined,
        StartedAt: output.StartedAt !== undefined && output.StartedAt !== null ? new Date(output.StartedAt) : undefined,
        State: output.State !== undefined && output.State !== null ? output.State : undefined,
    };
};
const deserializeAws_restJson1Environment = (output, context) => {
    return {
        ApplicationId: output.ApplicationId !== undefined && output.ApplicationId !== null ? output.ApplicationId : undefined,
        Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
        Id: output.Id !== undefined && output.Id !== null ? output.Id : undefined,
        Monitors: output.Monitors !== undefined && output.Monitors !== null
            ? deserializeAws_restJson1MonitorList(output.Monitors, context)
            : undefined,
        Name: output.Name !== undefined && output.Name !== null ? output.Name : undefined,
        State: output.State !== undefined && output.State !== null ? output.State : undefined,
    };
};
const deserializeAws_restJson1EnvironmentList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1Environment(entry, context);
    });
};
const deserializeAws_restJson1HostedConfigurationVersionSummary = (output, context) => {
    return {
        ApplicationId: output.ApplicationId !== undefined && output.ApplicationId !== null ? output.ApplicationId : undefined,
        ConfigurationProfileId: output.ConfigurationProfileId !== undefined && output.ConfigurationProfileId !== null
            ? output.ConfigurationProfileId
            : undefined,
        ContentType: output.ContentType !== undefined && output.ContentType !== null ? output.ContentType : undefined,
        Description: output.Description !== undefined && output.Description !== null ? output.Description : undefined,
        VersionNumber: output.VersionNumber !== undefined && output.VersionNumber !== null ? output.VersionNumber : undefined,
    };
};
const deserializeAws_restJson1HostedConfigurationVersionSummaryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1HostedConfigurationVersionSummary(entry, context);
    });
};
const deserializeAws_restJson1Monitor = (output, context) => {
    return {
        AlarmArn: output.AlarmArn !== undefined && output.AlarmArn !== null ? output.AlarmArn : undefined,
        AlarmRoleArn: output.AlarmRoleArn !== undefined && output.AlarmRoleArn !== null ? output.AlarmRoleArn : undefined,
    };
};
const deserializeAws_restJson1MonitorList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1Monitor(entry, context);
    });
};
const deserializeAws_restJson1TagMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const deserializeAws_restJson1Validator = (output, context) => {
    return {
        Content: output.Content !== undefined && output.Content !== null ? output.Content : undefined,
        Type: output.Type !== undefined && output.Type !== null ? output.Type : undefined,
    };
};
const deserializeAws_restJson1ValidatorList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1Validator(entry, context);
    });
};
const deserializeAws_restJson1ValidatorTypeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return entry;
    });
};
const deserializeMetadata = (output) => {
    var _a;
    return ({
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"],
    });
};
// Collect low-level response body stream to Uint8Array.
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
// Encode Uint8Array data into string with utf-8.
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
/**
 * Load an error code for the aws.rest-json-1.1 protocol.
 */
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
    return "";
};
//# sourceMappingURL=Aws_restJson1.js.map